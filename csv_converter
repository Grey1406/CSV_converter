#!/usr/bin/php
<?php
require_once __DIR__. '/vendor/autoload.php';

echo "CSV converter , made by Grey\n";

$shortopts  = "i:"; // параметр пути до исходного файла
$shortopts .= "c:"; // параметр пути до файла конфигурации
$shortopts .= "o:"; // параметр пути до файла с результатом
$shortopts .= "d:"; // разделитель
$shortopts .= "h";  // справка

$longopts  = array(
    "input:",       // параметр пути до исходного файла
    "config:",      // параметр пути до файла конфигурации
    "output:",      // параметр пути до файла с результатом
    "delimiter:",   // разделитель
    "skip-first",   // пропускать редактирование первой строки
    "trict",        // проверка соответсвия столбцов в исходном файле и файле конфигурации
    "help",         // справка
);
$options = getopt($shortopts, $longopts);

switch (count($options)) {
    case 1:
        if(isset($options['h'])|isset($options['help'])){
            echo getReference();
        } else {
            getParamError();
        }
        break;
    case 3:
    case 4:
    case 5:
    case 6: {
        list($error,$skipFirst,$delimiter,$strict,$originalFilename,$confFilename,$newFilename)=argParse($options);
        if(!empty($error)){
            getParamsError($error); break;
        }
        list($error,$encoding, $data) = loadOriginFile($originalFilename,$delimiter);
        if(!empty($error)){
            getFileError(); break;
        }

        list($error, $funcArray) = loadConfFile($confFilename);
        if(!empty($error)){
            getFileError(); break;
        }
        $newArray=CreateNewArray($data,$funcArray,$skipFirst);

        $error = saveNewFile($newFilename,$newArray,$encoding,$delimiter);
        if(!empty($error)){
            getFileError(); break;
        }

        echo "Файл был успешно сконвертирован \n";

//        ShowNewArray($newArray);
//        var_dump($options);
        break;
    }
    default:
        getParamError();
        break;
}

function argParse($options){
    $error=[];
    $skipFirst=isset($options['skip-first']);
    $delimiter=',';
    if(isset($options['delimiter'])){
        if(isset($options['d'])) {
            $error[]="попытка задать делитель передав две опции";
        } else {
            $delimiter=$options['delimiter'];
        }
    } else if(isset($options['d'])) {
        $delimiter=$options['d'];
    }
    $strict=isset($options['strict']);

    if(isset($options['input'])){
        if(isset($options['i'])) {
            $error[]="попытка задать входной файл передав две опции";
        } else {
            $originalFilename = __DIR__ . "/". $options['input'];
        }
    } else if(isset($options['i'])) {
        $originalFilename = __DIR__ . "/". $options['i'];
    }
    if(isset($options['config'])){
        if(isset($options['с'])) {
            $error[]="попытка задать файл конфигурации передав две опции";
        } else {
            $confFilename = __DIR__ . "/". $options['config'];
        }
    } else if(isset($options['c'])) {
        $confFilename = __DIR__ . "/". $options['c'];
    }
    if(isset($options['output'])){
        if(isset($options['o'])) {
            $error[]="попытка задать выходной файл передав две опции";
        } else {
            $newFilename = __DIR__ . "/". $options['output'];
        }
    } else if(isset($options['o'])) {
        var_dump($options);
        $newFilename = __DIR__ . "/". $options['o'];

    }

    return [$error,$skipFirst,$delimiter,$strict,$originalFilename,$confFilename,$newFilename];
}




function saveNewFile($newFilename,$newArray,$encoding,$delimiter)
{
    if (!file_exists($newFilename)) {
        $fp = fopen($newFilename, "w");
        fwrite($fp, "Значение, то что будет в файле");
        fclose($fp);
    }
    $error=[];
    if(is_file($newFilename)){
        if (($handle = fopen($newFilename, "w")) !== false) {
            foreach ($newArray as $rows) {
                fwrite($handle, iconv($encoding, "UTF-8", "\"".implode("\"".$delimiter."\"",$rows)."\"\n"));
            }
            fclose($handle);
        }
    } else {
        $error = 'передан не файл или файл не существует';
    }
    return $error;



}

function loadConfFile($confFilename)
{
    $error=[];
    $funcArray="";
    if(is_file($confFilename)) {
        $funcArray = require_once $confFilename;
    }else {
        $error = 'передан не файл или файл не существует';
    }
    return [$error,$funcArray];
}

function showNewArray(array $newFile)
{
    foreach ($newFile AS $row){
        foreach ($row AS $value){
            echo $value . "  ";
        }
        echo  " \n ";
    }
    echo "\n";
}

function createNewArray(array $oldFile,array $funcArray,$skipFirst)
{
    $newArray=[];
    $i=0;
    if($skipFirst){
        $i=1;
    }
    for (; $i < count($oldFile); $i++) {
        $newRow=[];
        for ($j = 0; $j < count($oldFile[$i]); $j++) {
            $newRow[]=getNewValue($funcArray,$oldFile[$i][$j], $oldFile[$i], $i,$j);
        }
        $newArray[]=$newRow;
    }
    return $newArray;
}

function getNewValue($funcArray,$value, $rowData, $rowIndex, $columnIndex){
    if(!isset($funcArray[$columnIndex])){
        return $value;
        }
    if(is_callable($funcArray[$columnIndex])) {
        $faker = Faker\Factory::create();
        return $funcArray[$columnIndex]($value, $rowData, $rowIndex, $faker);
    }
    try{
        $faker = Faker\Factory::create();
        $funcName=$funcArray[$columnIndex];
        if(is_string($faker->$funcName)){
            $str=$faker->$funcName;
            return $str;
        }
    } catch (Exception $e) {
        return $funcArray[$columnIndex];
    }


    return $value;
}

function loadOriginFile($originalFilename,$delimiter)
{
    $error=[];
    $arrayCSV=[];
    $encoding= "";
    if(is_file($originalFilename)){
        if (($handle = fopen($originalFilename, "r")) !== false) {
            while (($data = fgetcsv($handle, 0, $delimiter)) !== false) {
                if($encoding==""){
                    $encoding= mb_detect_encoding(implode("",$data));
                }
                $arrayCSV[] = $data;
            }
            fclose($handle);
        }
    } else {
        $error = 'передан не файл или файл не существует';
    }
    return [$error,$encoding,$arrayCSV];
}

function getReference(){
    $reference="";
    $reference.="\n";
    $reference.="Usage:\n";
    $reference.="  csv_converter --help \n";
    $reference.="  csv_converter -i imput_file_path -c confiration_file_path -o output_file_path\n";
    $reference.="  csv_converter -i imput_file_path -c confiration_file_path -o output_file_path [-d \",\"]\n";
    $reference.="  csv_converter -i imput_file_path -c confiration_file_path -o output_file_path [--skip-first]\n";
    $reference.="  csv_converter -i imput_file_path -c confiration_file_path -o output_file_path [--strict]\n";
    $reference.="\n";
    $reference.="Options:\n";
    $reference.="  -h --help                                Show this screen.\n";
    $reference.="  -i | --imput      imput_file_path        Path to imput csv file.\n";
    $reference.="  -c | --config     confiration_file_path  Path to configuration .php file.\n";
    $reference.="  -o | --output     output_file_path       Path to output csv file.\n";
    $reference.="  -d | --delimiter  delim                  Change standart delimeter for csv files.\n";
    $reference.="  --skip-first                             Skip the first row as a header\n";
    $reference.="  --strict                                 Verify that the source file contains the 
    required number of columns described in the configuration file.\n";

    return  $reference;
}

function getParamError(){
    echo " \n";
    echo "Ошибка параметра, передано неверное число параметров, воспользуйтесь справкой \n";
    echo "Для просмотра справки, используйте команду: \"csv_converter -h|--help\" \n";
}
function getParamsError($errors){
    echo " \n";
    echo "Ошибка параметра, произошли следующие ошибки:\n";
    foreach ($errors as $error){
        echo $error."\n";
    }
    echo "Для просмотра справки, используйте команду: \"csv_converter -h|--help\" \n";
}

function getFileError(){
    echo " \n";
    echo "Ошибка файла, не удалось прочитать один из файлов, воспользуйтесь справкой \n";
    echo "Для просмотра справки, используйте команду: \"csv_converter -h|--help\" \n";
}