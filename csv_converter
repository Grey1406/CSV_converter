#!/usr/bin/php
<?php
require_once __DIR__. '/vendor/autoload.php';

echo "CSV converter , made by Grey\n";

$shortopts  = "i:"; // параметр пути до исходного файла
$shortopts .= "c:"; // параметр пути до файла конфигурации
$shortopts .= "o:"; // параметр пути до файла с результатом
$shortopts .= "d:"; // разделитель
$shortopts .= "h";  // справка

$longopts  = array(
    "input:",       // параметр пути до исходного файла
    "config:",      // параметр пути до файла конфигурации
    "output:",      // параметр пути до файла с результатом
    "delimiter:",   // разделитель
    "skip-first",   // пропускать редактирование первой строки
    "strict",        // проверка соответсвия столбцов в исходном файле и файле конфигурации
    "help",         // справка
);
$options = getopt($shortopts, $longopts);

switch (count($options)) {
    case 1:
        if(isset($options['h'])|isset($options['help'])){
            getReference();
        } else {
            getParamError();
        }   break;
    case 3:
    case 4:
    case 5:
    case 6: {
        list($error,$skipFirst,$delimiter,$strict,$originalFilename,$confFilename,$newFilename)=argParse($options);
        if(!empty($error)){
            getParamsError($error);
        }

        list($error,$encoding, $data) = loadOriginFile($originalFilename,$delimiter);
        if(!empty($error)){
            getFileError($error);
        }

        list($error, $funcArray) = loadConfFile($confFilename);
        if(!empty($error)){
            getFileError($error);
        }

        $error = testStrict($data,$funcArray);
        if(!empty($error)){
            getCustomError($error);
        }

        $newArray=CreateNewArray($data,$funcArray,$skipFirst);

        $error = saveNewFile($newFilename,$newArray,$delimiter);
        if(!empty($error)){
            getFileError($error);
        }

        echo "Файл был успешно сконвертирован \n";
        exit(0);
    }
    default:
        getParamError();
}

function argParse($options){
    $error=[];
    $skipFirst=isset($options['skip-first']);
    $delimiter=',';
    if(isset($options['delimiter'])){
        if(isset($options['d'])) {
            $error[]="попытка задать делитель передав две опции";
        } else {
            $delimiter=$options['delimiter'];
        }
    } else if(isset($options['d'])) {
        $delimiter=$options['d'];
    }
    $strict=isset($options['strict']);
    $originalFilename='';
    $confFilename='';
    $newFilename='';
    if(isset($options['input'])){
        if(isset($options['i'])) {
            $error[]="попытка задать входной файл передав две опции";
        } else {
            $originalFilename = $options['input'];
        }
    } else if(isset($options['i'])) {
        $originalFilename = $options['i'];
    }
    if(isset($options['config'])){
        if(isset($options['с'])) {
            $error[]="попытка задать файл конфигурации передав две опции";
        } else {
            $confFilename = $options['config'];
        }
    } else if(isset($options['c'])) {
        $confFilename = $options['c'];
    }
    if(isset($options['output'])){
        if(isset($options['o'])) {
            $error[]="попытка задать выходной файл передав две опции";
        } else {
            $newFilename = $options['output'];
        }
    } else if(isset($options['o'])) {
        $newFilename = $options['o'];

    }

    return [$error,$skipFirst,$delimiter,$strict,$originalFilename,$confFilename,$newFilename];
}

function testStrict($data,$funcArray){
    $keys = array_keys($funcArray);
    $max = max($keys);
    if(count($data)>=$max){
        return [];
    } else {
        return ['количество столбцов исходного файла не соответсвует требуемому для конвертаци'
        , 'проверьте исходный файл и файл конфигурации'];
    }

}


function saveNewFile($newFilename,$newArray,$delimiter)
{
    if (!file_exists($newFilename)) {
        $fp = fopen($newFilename, "w"); // ("r" - считывать "w" - создавать "a" - добовлять к тексту),мы создаем файл
        fwrite($fp, "Значение, то что будет в файле");
        fclose($fp);
    }

    $error=[];
    if(is_writable($newFilename)){
        if (($handle = fopen($newFilename, "w")) !== false) {
            foreach ($newArray as $row) {
                $str="\"".implode("\"".$delimiter."\"",$row)."\"\n";
                if(mb_check_encoding(implode("", $row),'UTF-8')){
                    fwrite($handle,$str );
                } else {
                    $str=iconv('Windows-1251','UTF-8',$str);
                    $newStr=mb_convert_encoding($str,'Windows-1251');
                    fwrite($handle, $newStr);
                }

            }
            fclose($handle);
        }
    } else {
        $error[] = 'файл не доступен для записи';
    }
    return $error;

}

function loadConfFile($confFilename)
{
    $error=[];
    $funcArray="";
    if(!is_file($confFilename)) {
        $error[] = 'передан не файл или файл не существует';
        return [$error,$funcArray];
    }
    $info = new SplFileInfo($confFilename);
    if($info->getExtension()!='php'){
        $error[] = 'переданный файл не является файлом php';
        return [$error,$funcArray];
    }
    if(is_readable($confFilename)) {
        $funcArray = include $confFilename;
    }
    else {
        $error[] = 'файл не существует или не доступен для чтения';
    }
    if(!is_array($funcArray)){
        $error[] = 'переданный файл не содержит массив с инструкциями';
        return [$error,$funcArray];
    }
    return [$error,$funcArray];

}

function createNewArray(array $oldFile,array $funcArray,$skipFirst)
{
    $newArray=[];
    $i=0;
    if($skipFirst){
        $i=1;
    }
    for (; $i < count($oldFile); $i++) {
        $newRow=[];
        for ($j = 0; $j < count($oldFile[$i]); $j++) {
            $newRow[]=getNewValue($funcArray,$oldFile[$i][$j], $oldFile[$i], $i,$j);
        }
        $newArray[]=$newRow;
    }
    return $newArray;
}

function getNewValue($funcArray,$value, $rowData, $rowIndex, $columnIndex){

    if(!isset($funcArray[$columnIndex])){
        return $value;
        }
    if(is_callable($funcArray[$columnIndex])) {
        $faker = Faker\Factory::create();
        return $funcArray[$columnIndex]($value, $rowData, $rowIndex, $faker);
    }
    try{
        $faker = Faker\Factory::create();
        $funcName=$funcArray[$columnIndex];
        if(is_string($faker->$funcName)){
            $str=$faker->$funcName;
            return $str;
        }
    } catch (Exception $e) {
        return $funcArray[$columnIndex];
    }


    return $value;
}

function loadOriginFile($originalFilename,$delimiter)
{
    $error=[];
    $arrayCSV=[];
    $encoding= "";
    if(is_readable($originalFilename)){
            if (($handle = fopen($originalFilename, "r")) !== false) {
                while (($data = fgetcsv($handle, 0, $delimiter)) !== false) {
                    if ($encoding == "") {
                        if(mb_check_encoding(implode("", $data),'UTF-8')){
                            $encoding = 'UTF-8';
                        } else {
                            $encoding = 'Windows-1251';
                        }
                    }
                    $arrayCSV[] = $data;
                }
                fclose($handle);
            }
    } else {
        $error[] = 'файл не существует или не доступен для чтения';
    }
    return [$error,$encoding,$arrayCSV];
}

function getReference(){
    $reference="";
    $reference.="\n";
    $reference.="Usage:\n";
    $reference.="  csv_converter --help \n";
    $reference.="  csv_converter -i input_file_path -c configuration_file_path -o output_file_path\n";
    $reference.="  csv_converter -i input_file_path -c configuration_file_path -o output_file_path [-d \",\"]\n";
    $reference.="  csv_converter -i input_file_path -c configuration_file_path -o output_file_path [--skip-first]\n";
    $reference.="  csv_converter -i input_file_path -c configuration_file_path -o output_file_path [--strict]\n";
    $reference.="\n";
    $reference.="Options:\n";
    $reference.="  -h --help                                    Show this screen.\n";
    $reference.="  -i | --imput      input_file_path            Path to imput csv file.\n";
    $reference.="  -c | --config     configuration_file_path    Path to configuration .php file.\n";
    $reference.="  -o | --output     output_file_path           Path to output csv file.\n";
    $reference.="  -d | --delimiter  delimiter                  Change standard delimiter for csv files.\n";
    $reference.="  --skip-first                                 Skip the first row as a header\n";
    $reference.="  --strict                                     Verify that the source file contains the ";
    $reference.=" required number of columns described in the configuration file.\n";
    echo  $reference;
    exit(0);
}

function getParamError(){
    echo " \n";
    echo "Ошибка параметра, передано неверное число параметров, воспользуйтесь справкой \n";
    echo "Для просмотра справки, используйте команду: \"csv_converter -h|--help\" \n";
    exit(1);
}

function getParamsError($errors){
    echo " \n";
    echo "Ошибка параметра, произошли следующие ошибки:\n";
    foreach ($errors as $error){
        echo $error."\n";
    }
    echo "Для просмотра справки, используйте команду: \"csv_converter -h|--help\" \n";
    exit(1);
}

function getCustomError($errors){
    foreach ($errors as $error){
        echo $error."\n";
    }
    exit(1);
}

function getFileError($errors){
    echo " \n";
    echo "Ошибка файла, произошли следующие ошибки:\n";
    foreach ($errors as $error){
        echo $error."\n";
    }
    echo "Для просмотра справки, используйте команду: \"csv_converter -h|--help\" \n";
    exit(1);
}